// <auto-generated />
using System;
using Majority.RemittanceProvider.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Majority.RemittanceProvider.Infrastructure.Migrations
{
    [DbContext(typeof(RemittanceProviderContext))]
    [Migration("20220914202219_add-migration InitialCreate")]
    partial class addmigrationInitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Bank", b =>
                {
                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFSCCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MICRCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PinCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BankCode", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("Banks");

                    b.HasData(
                        new
                        {
                            BankCode = "HSB",
                            CountryCode = "US",
                            AccountNumber = "12345578",
                            BankName = "HSBC Bank of America",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "MS",
                            CountryCode = "US",
                            AccountNumber = "12345578",
                            BankName = "Morgan Stanely",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "BOA",
                            CountryCode = "US",
                            AccountNumber = "12345578",
                            BankName = "BankofAmerica",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "WF",
                            CountryCode = "US",
                            AccountNumber = "1234558",
                            BankName = "Wells Fargo",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "CG",
                            CountryCode = "US",
                            AccountNumber = "12345578",
                            BankName = "Citigroup",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "GS",
                            CountryCode = "US",
                            AccountNumber = "12345578",
                            BankName = "Goldman Sachs",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "BOA",
                            CountryCode = "SE",
                            AccountNumber = "12345578",
                            BankName = "BankofAmerica",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "SWE",
                            CountryCode = "SE",
                            AccountNumber = "1234558",
                            BankName = "Swed",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "SEB",
                            CountryCode = "SE",
                            AccountNumber = "12345578",
                            BankName = "SEB",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        },
                        new
                        {
                            BankCode = "HB",
                            CountryCode = "SE",
                            AccountNumber = "12345578",
                            BankName = "Handelsbanken",
                            IFSCCode = "431011201",
                            MICRCode = "43101120"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Beneficiary", b =>
                {
                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BankCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountNumber", "BankCode");

                    b.ToTable("Beneficiaries");

                    b.HasData(
                        new
                        {
                            AccountNumber = "123456789",
                            BankCode = "BOA",
                            BeneficiaryName = "Rajkumar"
                        },
                        new
                        {
                            AccountNumber = "12345",
                            BankCode = "BOA",
                            BeneficiaryName = "Johny"
                        },
                        new
                        {
                            AccountNumber = "12345",
                            BankCode = "HSB",
                            BeneficiaryName = "Robin"
                        },
                        new
                        {
                            AccountNumber = "123456789",
                            BankCode = "HSB",
                            BeneficiaryName = "Isebella"
                        },
                        new
                        {
                            AccountNumber = "123456789",
                            BankCode = "WF",
                            BeneficiaryName = "Jansi"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Code = "US",
                            CurrencyCode = "USD",
                            IsActive = true,
                            Name = "United States Of America"
                        },
                        new
                        {
                            Code = "SE",
                            CurrencyCode = "SEK",
                            IsActive = true,
                            Name = "Sweden"
                        },
                        new
                        {
                            Code = "SG",
                            CurrencyCode = "SGD",
                            IsActive = true,
                            Name = "Singapore"
                        },
                        new
                        {
                            Code = "NO",
                            CurrencyCode = "NOK",
                            IsActive = true,
                            Name = "Norway"
                        },
                        new
                        {
                            Code = "IN",
                            CurrencyCode = "INR",
                            IsActive = true,
                            Name = "India"
                        },
                        new
                        {
                            Code = "AU",
                            CurrencyCode = "AUD",
                            IsActive = true,
                            Name = "Australia"
                        },
                        new
                        {
                            Code = "PK",
                            CurrencyCode = "PAK",
                            IsActive = true,
                            Name = "Pakistan"
                        },
                        new
                        {
                            Code = "UK",
                            CurrencyCode = "GBP",
                            IsActive = true,
                            Name = "United Kingdom"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Currency", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Currencies");

                    b.HasData(
                        new
                        {
                            Code = "USD",
                            CountryCode = "US",
                            Name = "US dollar"
                        },
                        new
                        {
                            Code = "SEK",
                            CountryCode = "SE",
                            Name = "Swedish Krona"
                        },
                        new
                        {
                            Code = "NOK",
                            CountryCode = "NO",
                            Name = "Norwegin Krona"
                        },
                        new
                        {
                            Code = "PKR",
                            CountryCode = "PK",
                            Name = "Pakistan rupee"
                        },
                        new
                        {
                            Code = "AUD",
                            CountryCode = "AU",
                            Name = "Australian Dollar"
                        },
                        new
                        {
                            Code = "SGD",
                            CountryCode = "SG",
                            Name = "Singapore Dollar"
                        },
                        new
                        {
                            Code = "INR",
                            CountryCode = "IN",
                            Name = "Indian Rupee"
                        },
                        new
                        {
                            Code = "GBP",
                            CountryCode = "UK",
                            Name = "Pound sterling"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.ExchangeRate", b =>
                {
                    b.Property<string>("BaseCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DestinationCurrencyCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExchangeRateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExchangeRateToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasKey("BaseCurrencyCode", "DestinationCurrencyCode", "IsActive");

                    b.ToTable("ExchangeRates");

                    b.HasData(
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "AUD",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7106),
                            ExchangeRateToken = "91e30ae2-2d7e-40b3-97d1-0499ea78e39d",
                            Rate = 1.452348
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "USD",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7172),
                            ExchangeRateToken = "e048da39-d1a4-47a7-a20a-638a3be63733",
                            Rate = 1.0
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "SEK",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7179),
                            ExchangeRateToken = "ad9a1166-5ef5-466d-b7a0-3dd34c7f07b9",
                            Rate = 10.456480000000001
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "INR",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7184),
                            ExchangeRateToken = "6cb6c704-53fc-42fa-89ad-1f03166239fd",
                            Rate = 79.142250000000004
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "EUR",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7189),
                            ExchangeRateToken = "0a5fe2e7-426f-46bc-9520-400b786edbb5",
                            Rate = 0.98550499999999996
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "GBP",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7194),
                            ExchangeRateToken = "35a0da8a-5396-4f8c-ab92-430cdf358b59",
                            Rate = 0.85326500000000005
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "NOK",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7200),
                            ExchangeRateToken = "3cfea2f9-6ea8-4f0d-815a-daf1616b8496",
                            Rate = 9.8188010000000006
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "DKK",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7205),
                            ExchangeRateToken = "57c0278c-267e-42e6-a679-9a2246332fde",
                            Rate = 7.3286899999999999
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "PKR",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7230),
                            ExchangeRateToken = "d5985913-7f0d-4827-8146-30c2a2aa5bd1",
                            Rate = 231.166079
                        },
                        new
                        {
                            BaseCurrencyCode = "USD",
                            DestinationCurrencyCode = "SGD",
                            IsActive = true,
                            ExchangeRateDate = new DateTime(2022, 9, 14, 20, 22, 18, 844, DateTimeKind.Utc).AddTicks(7235),
                            ExchangeRateToken = "7ee5e504-7055-48e0-9c31-32aa3cb88404",
                            Rate = 1.39439
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.FeesDetails", b =>
                {
                    b.Property<int>("FeesDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeesDetailsId"), 1L, 1);

                    b.Property<double>("FeesPercentage")
                        .HasColumnType("float");

                    b.Property<string>("FromCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("ToCountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransferModeId")
                        .HasColumnType("int");

                    b.HasKey("FeesDetailsId");

                    b.HasIndex("TransferModeId");

                    b.ToTable("FeesDetails");

                    b.HasData(
                        new
                        {
                            FeesDetailsId = 1,
                            FeesPercentage = 0.59999999999999998,
                            FromCountryCode = "US",
                            IsAvailable = true,
                            ToCountryCode = "SE",
                            TransferModeId = 1
                        },
                        new
                        {
                            FeesDetailsId = 2,
                            FeesPercentage = 0.80000000000000004,
                            FromCountryCode = "US",
                            IsAvailable = true,
                            ToCountryCode = "SE",
                            TransferModeId = 2
                        },
                        new
                        {
                            FeesDetailsId = 3,
                            FeesPercentage = 0.90000000000000002,
                            FromCountryCode = "US",
                            IsAvailable = true,
                            ToCountryCode = "SE",
                            TransferModeId = 3
                        },
                        new
                        {
                            FeesDetailsId = 4,
                            FeesPercentage = 0.59999999999999998,
                            FromCountryCode = "SE",
                            IsAvailable = true,
                            ToCountryCode = "US",
                            TransferModeId = 1
                        },
                        new
                        {
                            FeesDetailsId = 5,
                            FeesPercentage = 0.80000000000000004,
                            FromCountryCode = "SE",
                            IsAvailable = true,
                            ToCountryCode = "US",
                            TransferModeId = 2
                        },
                        new
                        {
                            FeesDetailsId = 6,
                            FeesPercentage = 0.90000000000000002,
                            FromCountryCode = "SE",
                            IsAvailable = true,
                            ToCountryCode = "US",
                            TransferModeId = 4
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.State", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code", "CountryCode");

                    b.HasIndex("CountryCode");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Code = "CA",
                            CountryCode = "US",
                            Name = "California"
                        },
                        new
                        {
                            Code = "TE",
                            CountryCode = "US",
                            Name = "Texas"
                        },
                        new
                        {
                            Code = "NY",
                            CountryCode = "US",
                            Name = "NewYork"
                        },
                        new
                        {
                            Code = "GE",
                            CountryCode = "US",
                            Name = "Georgia"
                        },
                        new
                        {
                            Code = "SK",
                            CountryCode = "SE",
                            Name = "Stockholm"
                        },
                        new
                        {
                            Code = "GT",
                            CountryCode = "SE",
                            Name = "Gothernberg"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<double>("Fees")
                        .HasColumnType("float");

                    b.Property<double>("FromAmount")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionSender", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("SenderCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderFromState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderPostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("TransactionSender");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionTo", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ToBankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToBankAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToBankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToBankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransactionId");

                    b.ToTable("TransactionTo");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransferMode", b =>
                {
                    b.Property<int>("TransferModeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransferModeId"), 1L, 1);

                    b.Property<string>("TransferModeDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferModeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TransferModeId");

                    b.ToTable("TransferModes");

                    b.HasData(
                        new
                        {
                            TransferModeId = 1,
                            TransferModeDescription = "Transfer money from bank",
                            TransferModeName = "Bank"
                        },
                        new
                        {
                            TransferModeId = 2,
                            TransferModeDescription = "Credit card transfer",
                            TransferModeName = "Credit"
                        },
                        new
                        {
                            TransferModeId = 3,
                            TransferModeDescription = "Transfer money using RTGS",
                            TransferModeName = "Bank"
                        },
                        new
                        {
                            TransferModeId = 4,
                            TransferModeDescription = "Transfer money using trustly",
                            TransferModeName = "Trustly"
                        });
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Bank", b =>
                {
                    b.HasOne("Majority.RemittanceProvider.Domain.RemittanceProvider.Country", "Country")
                        .WithMany("Banks")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.FeesDetails", b =>
                {
                    b.HasOne("Majority.RemittanceProvider.Domain.RemittanceProvider.TransferMode", "TransferMode")
                        .WithMany("Fees")
                        .HasForeignKey("TransferModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransferMode");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.State", b =>
                {
                    b.HasOne("Majority.RemittanceProvider.Domain.RemittanceProvider.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionSender", b =>
                {
                    b.HasOne("Majority.RemittanceProvider.Domain.RemittanceProvider.Transaction", null)
                        .WithOne("TransactionSender")
                        .HasForeignKey("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionSender", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionTo", b =>
                {
                    b.HasOne("Majority.RemittanceProvider.Domain.RemittanceProvider.Transaction", null)
                        .WithOne("TransactionTo")
                        .HasForeignKey("Majority.RemittanceProvider.Domain.RemittanceProvider.TransactionTo", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Country", b =>
                {
                    b.Navigation("Banks");

                    b.Navigation("States");
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.Transaction", b =>
                {
                    b.Navigation("TransactionSender")
                        .IsRequired();

                    b.Navigation("TransactionTo")
                        .IsRequired();
                });

            modelBuilder.Entity("Majority.RemittanceProvider.Domain.RemittanceProvider.TransferMode", b =>
                {
                    b.Navigation("Fees");
                });
#pragma warning restore 612, 618
        }
    }
}
